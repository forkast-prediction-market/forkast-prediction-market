---
description: Project-Specific Rules for Forkast Prediction Market
globs: **/*
alwaysApply: true
---

# Project-Specific Rules for Forkast Prediction Market

These rules are designed to help the AI assistant understand and interact with the `forkast-prediction-market` codebase effectively.

## 1. Project Context and Goal

- **Decentralized Prediction Market:** This project is a decentralized prediction market platform, a fork of Polymarket. The primary goal is to provide a robust, scalable, and user-friendly platform for creating and trading on prediction markets.
- **Revenue Model:** Be aware that the platform has a built-in revenue model, distributing 1% of traded volume to the platform owner and 1% to infrastructure/protocol development. This implies that core trading and fee distribution logic are critical.
- **Data Synchronization:** Events are synchronized from platforms like Polymarket, and liquidity is shared. This suggests there will be integration points with external data sources and smart contracts.

## 2. Tech Stack and Best Practices

- **Frontend (Next.js 15, TypeScript, Tailwind CSS, shadcn):**
  - **Next.js App Router:** Adhere to Next.js 15 App Router conventions for routing, data fetching, and component organization.
  - **React 19:** Adhere to React 19 features and best practices.
  - **TypeScript:** Always use TypeScript for type safety. Define interfaces and types (`src/types/`) clearly.
  - **Tailwind CSS:** Utilize Tailwind CSS for styling. Avoid inline styles or custom CSS files unless absolutely necessary and justified.
  - **Shadcn:** Utilize shadcn components when needed, they live on `src/components/ui` and new ones can be added with `npx shadcn@latest add <component-name>`
  - **Responsive Design:** Ensure all UI changes are mobile-responsive, as it's a stated feature.
  - **Charting:** The `@visx` library is used for data visualization and charts.
- **Blockchain & Web3 (Polygon, Solidity, Hardhat, Ethers.js, viem, wagmi):**
  - **Smart Contracts:** Be mindful of the security and immutability aspects of smart contracts. When dealing with smart contract interactions, prioritize correctness and security.
  - **Wallet Integration:** Wallet connection is handled by `reown/appkit` and `better-auth` libraries. Refer to `src/lib/auth-client.ts` or `src/providers/siwe.ts` for existing patterns. `ethers.js` is also used for general blockchain interactions.
- **State Management (Zustand):** For client-side state, primarily use React Hooks and the Context API. For more complex global state, `Zustand` is used (e.g., `src/stores/useUser.ts`).
- **Database (PostgreSQL & Supabase):** PostgreSQL is used as the primary database, with Supabase (`@supabase/supabase-js`) providing an interface for database interactions. Refer to `src/lib/db/` for database query patterns and `src/lib/supabase.ts` for Supabase client configuration.
- **Data Handling & Synchronization:** Understand how data is fetched and managed, especially the synchronization of market data from The Graph subgraphs to Supabase (`src/app/api/sync-events/route.ts`). Look for existing patterns for API calls and database interactions (`src/lib/data.ts`, `src/lib/db/`).
- **Styling Utilities:** `clsx` and `tailwind-merge` are used in conjunction with Tailwind CSS for conditional styling and efficient class management (e.g., `src/lib/utils.ts`).

## 3. Project Structure and Conventions

- **File Organization:**
  - `src/app/`: Next.js pages and API routes. Prefer to colocate components that are only related to the page with a private folder called `_components` and actions to the same route folder.
  - `src/components/`: Reusable React components. Group related components within subdirectories (e.g., `src/components/ui/`).
  - `src/hooks/`: Custom React hooks for reusable logic.
  - `src/lib/`: Utility functions, configurations, and core logic.
  - `src/lib/db/`: Supabase queries, use 'use cache' directive if queries do not rely on authenticated user.
  - `src/types/`: Centralized TypeScript type definitions.
  - `public/`: Static assets like images and fonts.
- **API Routes (`src/app/api/`):** Follow Next.js API route conventions for backend logic.
  - `src/app/api/auth/[...all]/route.ts`: Authentication routes using `better-auth`.
  - `src/app/api/events/[slug]/related/route.ts`: API for fetching related events.
  - `src/app/api/markets/[condition_id]/route.ts`: API for market-specific data.
  - `src/app/api/search/route.ts`: API for search functionality.
  - `src/app/api/sync-events/route.ts`: Critical route for synchronizing market data from subgraphs to Supabase.
  - `src/app/api/trading/stats/route.ts`: API for trading statistics.
  - `src/app/api/users/[address]/positions/route.ts`: API for user positions.
- **Database Interactions:** Refer to `src/lib/db/` for database query patterns.
- **Naming Conventions:** Adhere to existing naming conventions for files, components, variables, and functions (e.g., PascalCase for components, camelCase for variables/functions).

## 4. Priorities and Considerations

- **Security:** Given the nature of a prediction market and smart contracts, security is paramount. Always consider potential vulnerabilities, especially when dealing with blockchain interactions, user data, and financial transactions.
- **Performance:** Real-time updates and a smooth user experience are crucial. Optimize for performance, especially when handling market data and charts.
- **User Experience (UX):** Maintain the "Modern UI/UX" and "Mobile-Responsive Design" standards.
- **Code Reusability:** Favor creating reusable components and hooks to maintain a clean and efficient codebase.
