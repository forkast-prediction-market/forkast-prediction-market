---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---

- **Rule Improvement Triggers**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across multiple files
  - Common error patterns that could be prevented with a rule
  - New libraries or tools being used consistently across 3+ files
  - Emerging best practices in the codebase

- **Analysis Process**
  - Compare new code with existing rules to identify gaps
  - Identify patterns that should be standardized across the codebase
  - Look for references to external documentation that should be codified
  - Check for consistent error handling patterns that need documentation
  - Monitor test patterns and coverage requirements

- **Rule Updates**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by establishing a rule
    - Code reviews repeatedly mention the same feedback points
    - New security or performance patterns emerge in the codebase

  - **Modify Existing Rules When:**
    - Better examples exist in the actual codebase
    - Additional edge cases are discovered during development
    - Related rules have been updated and need cross-references
    - Implementation details have changed in the tech stack

- **Example Pattern Recognition**
  - When identifying patterns, look for code that appears in multiple files
  ```typescript
  // If you see repeated patterns like:
  const { data } = await supabaseAdmin
    .from('users')
    .select('*')
  
  // Consider adding to [supabase.mdc](mdc:.cursor/rules/supabase.mdc):
  // - Standard select fields for common queries
  // - Common where conditions and filters
  // - Performance optimization patterns with 'use cache'
  ```

- **Rule Quality Checks**
  - Rules should be actionable and specific with clear requirements
  - Examples should come from actual code in the codebase
  - References should be up to date and point to existing files
  - Patterns should be consistently enforced across the project

- **Continuous Improvement**
  - Monitor code review comments for recurring feedback
  - Track common development questions that indicate missing rules
  - Update rules after major refactors or architecture changes
  - Add links to relevant documentation and external resources
  - Cross-reference related rules to maintain consistency

- **Rule Deprecation**
  - Mark outdated patterns as deprecated with clear migration guidance
  - Remove rules that no longer apply to the current codebase
  - Update references to deprecated rules with migration paths
  - Document migration paths for old patterns to new standards

- **Documentation Updates**
  - Keep examples synchronized with actual code changes
  - Update references to external documentation when versions change
  - Maintain links between related rules for easy navigation
  - Document breaking changes and migration requirements

Follow [rules.mdc](mdc:.cursor/rules/rules.mdc) for proper rule formatting and structure.
